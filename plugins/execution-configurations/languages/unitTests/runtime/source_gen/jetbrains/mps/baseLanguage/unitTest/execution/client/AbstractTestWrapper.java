package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.execution.api.Java_Command;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public abstract class AbstractTestWrapper<N extends SNode> implements ITestNodeWrapper<N> {
  @NotNull
  protected final SNodeReference myNodePointer;
  private String myFqName;
  public AbstractTestWrapper(@NotNull N node) {

    myNodePointer = new SNodePointer(node);
  }
  public AbstractTestWrapper(@NotNull SNodeReference nodePointer) {
    myNodePointer = nodePointer;
  }
  @Nullable
  @Override
  public N getNode() {
    return (N) ((SNodePointer) myNodePointer).resolve(MPSModuleRepository.getInstance());
  }
  @NotNull
  @Override
  public SNodeReference getNodePointer() {
    return myNodePointer;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    AbstractTestWrapper that = (AbstractTestWrapper) o;
    if ((this.myNodePointer != null ? !(((Object) this.myNodePointer).equals(that.myNodePointer)) : that.myNodePointer != null)) {
      return false;
    }

    return true;
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((this.myNodePointer != null ? ((Object) this.myNodePointer).hashCode() : 0));
    return result;
  }
  @Nullable
  @Override
  public ITestNodeWrapper getTestCase() {
    return null;
  }
  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  }
  @NotNull
  @Override
  public Tuples._3<String, List<String>, List<String>> getTestRunParameters() {
    return getDefaultRunParameters();
  }
  @Override
  public String getName() {
    SNode node = getNode();
    if (node == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
      return SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    } else {
      throw new UnsupportedOperationException("Should override getName for not INamedConcept: " + SNodeOperations.getConcept(node));
    }
  }
  @Override
  public String getFqName() {
    ITestNodeWrapper testCase = getTestCase();
    if (isTestCase() || testCase == null) {
      SNode node = getNode();
      if (node == null) {
        return null;
      }
      if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
        return SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      } else {
        throw new UnsupportedOperationException("Should override getFqName for not INamedConcept: " + SNodeOperations.getConcept(node));
      }
    }
    return testCase.getFqName() + "." + getName();
  }
  @Override
  public String getCachedFqName() {
    if (myFqName == null) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          myFqName = getFqName();
        }
      });
    }
    return myFqName;
  }
  public static Tuples._3<String, List<String>, List<String>> getDefaultRunParameters() {
    List<String> startupPath = Java_Command.getClasspath(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("8b958198-128f-4136-80e5-ca9777caa869(jetbrains.mps.baseLanguage.unitTest.execution.startup)")));
    return MultiTuple.<String,List<String>,List<String>>from("jetbrains.mps.baseLanguage.unitTest.execution.server.DefaultTestExecutor", ListSequence.fromList(new ArrayList<String>()), startupPath);
  }
}
