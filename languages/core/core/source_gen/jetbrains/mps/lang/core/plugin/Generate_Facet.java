package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.IModifiableGenerationSettings;
import jetbrains.mps.generator.GenerationSettingsProvider;
import jetbrains.mps.generator.GenerationOptions;
import jetbrains.mps.generator.GenerationCacheContainer;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.generator.IncrementalGenerationStrategy;
import jetbrains.mps.generator.impl.DefaultIncrementalStrategy;
import jetbrains.mps.generator.impl.DefaultNonIncrementalStrategy;
import jetbrains.mps.generator.DefaultGenerationParametersProvider;
import jetbrains.mps.generator.TransientModelsProvider;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.smodel.resources.MResource;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.generator.generationTypes.IGenerationHandler;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.generator.GenerationFacade;
import jetbrains.mps.smodel.resources.DResource;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.make.delta.IInternalDelta;
import jetbrains.mps.make.delta.IDeltaVisitor;

public class Generate_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.lang.core.Generate");
  public Generate_Facet() {
    ListSequence.fromList(targets).addElement(new Generate_Facet.Target_checkParameters());
    ListSequence.fromList(targets).addElement(new Generate_Facet.Target_configure());
    ListSequence.fromList(targets).addElement(new Generate_Facet.Target_preloadModels());
    ListSequence.fromList(targets).addElement(new Generate_Facet.Target_generate());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.make.facets.Make")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new Generate_Facet.TargetProperties();
  }
  public static class Target_checkParameters implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters");
    public Target_checkParameters() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_fi61u2_a0a = null;
          final Iterable<IResource> input = (Iterable) (Iterable) rawInput;
          switch (0) {
            case 0:
              if (vars(pa.global()).project() == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("project is null")));
                return new IResult.FAILURE(_output_fi61u2_a0a);
              }
              if (vars(pa.global()).operationContext() == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("operationContext is null")));
                return new IResult.FAILURE(_output_fi61u2_a0a);
              }
              if (vars(pa.global()).cleanMake() == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no cleanMake")));
                return new IResult.FAILURE(_output_fi61u2_a0a);
              }
            default:
              return new IResult.SUCCESS(_output_fi61u2_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return null;
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return null;
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return false;
    }
    public boolean producesOutput() {
      return false;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Variables());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._3) t).assign((Tuples._3) copyFrom);
      }
      return t;
    }
    public int workEstimate() {
      return 10;
    }
    public static Generate_Facet.Target_checkParameters.Variables vars(IPropertiesPool ppool) {
      return ppool.properties(name, Generate_Facet.Target_checkParameters.Variables.class);
    }
    public static class Variables extends MultiTuple._3<Project, IOperationContext, Boolean> {
      public Variables() {
        super();
      }
      public Variables(Project project, IOperationContext operationContext, Boolean cleanMake) {
        super(project, operationContext, cleanMake);
      }
      public Project project(Project value) {
        return super._0(value);
      }
      public IOperationContext operationContext(IOperationContext value) {
        return super._1(value);
      }
      public Boolean cleanMake(Boolean value) {
        return super._2(value);
      }
      public Project project() {
        return super._0();
      }
      public IOperationContext operationContext() {
        return super._1();
      }
      public Boolean cleanMake() {
        return super._2();
      }
      @SuppressWarnings(value = "unchecked")
      public Generate_Facet.Target_checkParameters.Variables assignFrom(Tuples._3<Project, IOperationContext, Boolean> from) {
        return (Generate_Facet.Target_checkParameters.Variables) super.assign(from);
      }
    }
  }
  public static class Target_configure implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.configure");
    public Target_configure() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_fi61u2_a0b = null;
          final Iterable<IResource> input = (Iterable) (Iterable) rawInput;
          switch (0) {
            case 0:
              IModifiableGenerationSettings settings = GenerationSettingsProvider.getInstance().getGenerationSettings();
              if (vars(pa.global()).generationOptions() == null) {
                vars(pa.global()).generationOptions(GenerationOptions.fromSettings(settings));
              }
              Iterable<GenerationCacheContainer> caches = ExtensionPoint.<GenerationCacheContainer>generify(new ExtensionPoint("jetbrains.mps.lang.core.GeneratorCache", GenerationCacheContainer.class)).getObjects();
              GenerationCacheContainer cacheContainer = (Sequence.fromIterable(caches).isEmpty() ? null : Sequence.fromIterable(caches).first());
              final IncrementalGenerationStrategy incrementalStrategy;
              if (settings.isIncremental()) {
                incrementalStrategy = new DefaultIncrementalStrategy((settings.isIncrementalUseCache() ? cacheContainer : null));
              } else {
                incrementalStrategy = new DefaultNonIncrementalStrategy();
              }
              vars(pa.global()).generationOptions().incremental(incrementalStrategy);
              vars(pa.global()).generationOptions().tracing(settings.getPerformanceTracingLevel());
              vars(pa.global()).generationOptions().saveTransientModels(vars(pa.global()).saveTransient()).rebuildAll(Generate_Facet.Target_checkParameters.vars(pa.global()).cleanMake()).keepOutputModel(true);
              vars(pa.global()).parametersProvider(new DefaultGenerationParametersProvider());
              vars(pa.global()).generationOptions().parameters(vars(pa.global()).parametersProvider());

              TransientModelsProvider tmc = Generate_Facet.Target_checkParameters.vars(pa.global()).project().getComponent(TransientModelsProvider.class);
              vars(pa.global()).transientModelsProvider((tmc != null ? tmc : new TransientModelsProvider(Generate_Facet.Target_checkParameters.vars(pa.global()).project(), null)));

              //vars(pa.global()).transientModelsProvider().removeAllTransient();
              return new IResult.SUCCESS(_output_fi61u2_a0b);
            default:
              return new IResult.SUCCESS(_output_fi61u2_a0b);
          }
        }
      };
    }
    public IConfig createConfig() {
      return new IConfig.Stub() {
        @Override
        public boolean configure(final IConfigMonitor cmonitor, final IPropertiesAccessor pa) {
          switch (0) {
            case 0:
              IModifiableGenerationSettings settings = GenerationSettingsProvider.getInstance().getGenerationSettings();
              vars(pa.global()).saveTransient(settings.isSaveTransientModels());
            default:
              return true;
          }
        }
      };
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return null;
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return false;
    }
    public boolean producesOutput() {
      return false;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Variables());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._4) t).assign((Tuples._4) copyFrom);
      }
      return t;
    }
    public int workEstimate() {
      return 10;
    }
    public static Generate_Facet.Target_configure.Variables vars(IPropertiesPool ppool) {
      return ppool.properties(name, Generate_Facet.Target_configure.Variables.class);
    }
    public static class Variables extends MultiTuple._4<Boolean, GenerationOptions.OptionsBuilder, DefaultGenerationParametersProvider, TransientModelsProvider> {
      public Variables() {
        super();
      }
      public Variables(Boolean saveTransient, GenerationOptions.OptionsBuilder generationOptions, DefaultGenerationParametersProvider parametersProvider, TransientModelsProvider transientModelsProvider) {
        super(saveTransient, generationOptions, parametersProvider, transientModelsProvider);
      }
      public Boolean saveTransient(Boolean value) {
        return super._0(value);
      }
      public GenerationOptions.OptionsBuilder generationOptions(GenerationOptions.OptionsBuilder value) {
        return super._1(value);
      }
      public DefaultGenerationParametersProvider parametersProvider(DefaultGenerationParametersProvider value) {
        return super._2(value);
      }
      public TransientModelsProvider transientModelsProvider(TransientModelsProvider value) {
        return super._3(value);
      }
      public Boolean saveTransient() {
        return super._0();
      }
      public GenerationOptions.OptionsBuilder generationOptions() {
        return super._1();
      }
      public DefaultGenerationParametersProvider parametersProvider() {
        return super._2();
      }
      public TransientModelsProvider transientModelsProvider() {
        return super._3();
      }
      @SuppressWarnings(value = "unchecked")
      public Generate_Facet.Target_configure.Variables assignFrom(Tuples._4<Boolean, GenerationOptions.OptionsBuilder, DefaultGenerationParametersProvider, TransientModelsProvider> from) {
        return (Generate_Facet.Target_configure.Variables) super.assign(from);
      }
    }
  }
  public static class Target_preloadModels implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.preloadModels");
    public Target_preloadModels() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_fi61u2_a0c = null;
          final Iterable<MResource> input = (Iterable<MResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              int work = Sequence.fromIterable(input).count() * 100;
              if (work == 0) {
                return new IResult.SUCCESS(_output_fi61u2_a0c);
              }
              monitor.currentProgress().beginWork("Pre-loading models", work, monitor.currentProgress().workLeft());
              Sequence.fromIterable(input).visitAll(new IVisitor<MResource>() {
                public void visit(final MResource mod) {
                  monitor.currentProgress().advanceWork("Pre-loading models", 100);
                  Generate_Facet.Target_checkParameters.vars(pa.global()).project().getModelAccess().runReadAction(new Runnable() {
                    public void run() {
                      Sequence.fromIterable(mod.models()).visitAll(new IVisitor<SModel>() {
                        public void visit(SModel m) {
                          m.load();
                        }
                      });
                    }
                  });
                }
              });
              monitor.currentProgress().finishWork("Pre-loading models");
              _output_fi61u2_a0c = Sequence.fromIterable(_output_fi61u2_a0c).concat(Sequence.fromIterable(input));
            default:
              return new IResult.SUCCESS(_output_fi61u2_a0c);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.configure")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(MResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
    public int workEstimate() {
      return 400;
    }
  }
  public static class Target_generate implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.generate");
    public Target_generate() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          final Wrappers._T<Iterable<IResource>> _output_fi61u2_a0d = new Wrappers._T<Iterable<IResource>>(null);
          final Iterable<MResource> input = (Iterable<MResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              boolean generationOk = false;
              final Wrappers._T<Map<SModule, Iterable<SModel>>> retainedModels = new Wrappers._T<Map<SModule, Iterable<SModel>>>();

              Generate_Facet.Target_checkParameters.vars(pa.global()).project().getModelAccess().runReadAction(new Runnable() {
                public void run() {
                  retainedModels.value = RetainedUtil.collectModelsToRetain(input);
                }
              });

              for(SModule module: retainedModels.value.keySet()) {
                Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider().removeTransientModel(module);
              }

              IGenerationHandler gh = new MakeGenerationHandler(new _FunctionTypes._return_P1_E0<Boolean, GResource>() {
                public Boolean invoke(GResource data) {
                  data.retainedModels(MapSequence.fromMap(retainedModels.value).get(data.module()));
                  _output_fi61u2_a0d.value = Sequence.fromIterable(_output_fi61u2_a0d.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(data)));
                  return true;
                }
              });
              IMessageHandler mh = new IMessageHandler() {
                @Override
                public void handle(IMessage msg) {
                  monitor.reportFeedback(new IFeedback.MESSAGE(msg));
                }
                @Override
                public void clear() {
                }
              };

              progressMonitor.start("Generating", Sequence.fromIterable(input).foldLeft(0, new ILeftCombinator<MResource, Integer>() {
                public Integer combine(Integer s, MResource it) {
                  return s + Sequence.fromIterable(it.models()).count() * 1000;
                }
              }));
              try {
                List<SModel> models = Sequence.fromIterable(input).translate(new ITranslator2<MResource, SModel>() {
                  public Iterable<SModel> translate(MResource in) {
                    return in.models();
                  }
                }).toListSequence();

                generationOk = GenerationFacade.generateModels(Generate_Facet.Target_checkParameters.vars(pa.global()).project(), models, Generate_Facet.Target_checkParameters.vars(pa.global()).operationContext(), gh, progressMonitor.subTask(1000), mh, Generate_Facet.Target_configure.vars(pa.global()).generationOptions().create(), Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider());
              } finally {
                progressMonitor.done();
              }

              if (!(generationOk)) {
                return new IResult.FAILURE(_output_fi61u2_a0d.value);
              }
              _output_fi61u2_a0d.value = Sequence.fromIterable(_output_fi61u2_a0d.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(Sequence.<IDelta>singleton(new IInternalDelta() {
                @Override
                public IDelta merge(IDelta toMerge) {
                  return this;
                }
                @Override
                public boolean contains(IDelta other) {
                  return false;
                }
                @Override
                public boolean reconcile() {
                  if (!(Generate_Facet.Target_configure.vars(pa.global()).saveTransient())) {
                    Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider().removeAllTransient();
                  }
                  return true;
                }
                @Override
                public boolean acceptVisitor(IDeltaVisitor visitor) {
                  return true;
                }
              })))));
            default:
              return new IResult.SUCCESS(_output_fi61u2_a0d.value);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.configure")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile"), new ITarget.Name("jetbrains.mps.make.facets.Make.make")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(MResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
    public int workEstimate() {
      return 5000;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters");
        if (properties.hasProperties(name)) {
          Generate_Facet.Target_checkParameters.Variables props = properties.properties(name, Generate_Facet.Target_checkParameters.Variables.class);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.checkParameters.project", null);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.checkParameters.operationContext", null);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.checkParameters.cleanMake", String.valueOf(props.cleanMake()));
        }
      }
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.configure");
        if (properties.hasProperties(name)) {
          Generate_Facet.Target_configure.Variables props = properties.properties(name, Generate_Facet.Target_configure.Variables.class);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.configure.saveTransient", String.valueOf(props.saveTransient()));
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.configure.generationOptions", null);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.configure.parametersProvider", null);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.Generate.configure.transientModelsProvider", null);
        }
      }
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters");
          Generate_Facet.Target_checkParameters.Variables props = properties.properties(name, Generate_Facet.Target_checkParameters.Variables.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.checkParameters.project")) {
            props.project(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.checkParameters.operationContext")) {
            props.operationContext(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.checkParameters.cleanMake")) {
            props.cleanMake(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.lang.core.Generate.checkParameters.cleanMake")));
          }
        }
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.Generate.configure");
          Generate_Facet.Target_configure.Variables props = properties.properties(name, Generate_Facet.Target_configure.Variables.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.configure.saveTransient")) {
            props.saveTransient(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.lang.core.Generate.configure.saveTransient")));
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.configure.generationOptions")) {
            props.generationOptions(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.configure.parametersProvider")) {
            props.parametersProvider(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.Generate.configure.transientModelsProvider")) {
            props.transientModelsProvider(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
